from graphviz import Digraph

dot = Digraph(comment="Detailed Information Flow")

dot.node("A", "Source Code")
dot.node("B", "MinLangLexer")
dot.node("B1", "Rule 1: Identifiers")
dot.node("B2", "Rule 2: Keywords")
dot.node("BN", "Rule N: ...")
dot.node("C", "Token Stream")
dot.node("D", "MinLangParser")
dot.node("D1", "Rule 1: Expressions")
dot.node("D2", "Rule 2: Statements")
dot.node("DN", "Rule N: ...")
dot.node("E", "Parse Tree")
dot.node("F", "LLVMCodeGenerator")
dot.node("F1", "Node Type 1: Expressions")
dot.node("F2", "Node Type 2: Statements")
dot.node("FN", "Node Type N: ...")
dot.node("G", "LLVM IR Code")
dot.node("H", "File")

dot.edge("A", "B", label="Tokenizes")
dot.edge("B", "B1", label="Applies")
dot.edge("B", "B2", label="Applies")
dot.edge("B", "BN", label="Applies")
dot.edge("B1", "C", label="Generates")
dot.edge("B2", "C", label="Generates")
dot.edge("BN", "C", label="Generates")
dot.edge("C", "D", label="Parses")
dot.edge("D", "D1", label="Applies")
dot.edge("D", "D2", label="Applies")
dot.edge("D", "DN", label="Applies")
dot.edge("D1", "E", label="Generates")
dot.edge("D2", "E", label="Generates")
dot.edge("DN", "E", label="Generates")
dot.edge("E", "F", label="Visits")
dot.edge("F", "F1", label="Generates")
dot.edge("F", "F2", label="Generates")
dot.edge("F", "FN", label="Generates")
dot.edge("F1", "G", label="Generates")
dot.edge("F2", "G", label="Generates")
dot.edge("FN", "G", label="Generates")
dot.edge("G", "H", label="Saves")

dot.render("detailed_information_flow", view=True)  # change the path as needed
